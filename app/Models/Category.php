<?php

namespace App\Models;

use App\Models\Coupon;
use App\Models\Product;
use App\Models\Attribute;
use App\Models\Promotion;
use App\Helpers\Localization;
use Database\Factories\CategoryFactory;
use Etchfoda\Translatable\Translatable;
use Illuminate\Database\Eloquent\Model;
use App\Observers\Admin\CategoryObserver;
use App\Models\Translations\CategoryTranslation;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Category extends Model
{
    use Translatable, HasFactory;

    public array $translatedAttributes = ['slug', 'name', 'body'];
    protected $fillable = ['is_active', 'in_header', 'code'];
//    protected $appends = ['name', 'slug'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        Category::observe(CategoryObserver::class);
    }

    public function getUrlAttribute()
    {
        if ($this->slug != '') {
            return route_lang('web.categories.products.search', $this->slug);
        }
    }

    public function get_seo($lang, $column, $id)
    {
        $product = CategoryTranslation::where('locale', $lang)->where('category_id', $id)->get()->first();
        if (!$product) {
            return '';
        } else {
            return $product->$column;
        }
    }

    public function getIconUrlAttribute()
    {
        if (filter_var($this->icon, FILTER_VALIDATE_URL) !== false) {
            return $this->icon;
        }
        $path = urlencode($this->icon) ?: 'default.png';
        return asset("storage/uploads/categories/{$path}");
    }

    public function icon_url($x, $y)
    {
        if (filter_var($this->icon, FILTER_VALIDATE_URL) !== false) {
            return $this->icon;
        }
        $path = urlencode($this->icon) ?: 'default.png';
        return asset("storage/uploads/{$x}x{$y}/categories/{$path}");
    }

    public function getBannerUrlAttribute()
    {
        return asset('storage/uploads/categories/' . $this->banner);
    }

    public function banner_url($x, $y)
    {
        return asset("storage/uploads/{$x}x{$y}/categories/" . $this->banner);
    }

    public function parent()
    {
        return $this->belongsTo(Category::class, 'parent_id');
    }

    public function children()
    {
        return $this->hasMany(Category::class, 'parent_id');
    }

    public function activeChildes()
    {
        return $this->hasMany(Category::class, 'parent_id')->where('is_active', true);
    }

    public function products()
    {
        return $this->belongsToMany(Product::class, 'product_categories', 'category_id', 'product_id');
    }

    public function groupAttributes()
    {
        return $this->belongsToMany(Attribute::class, 'attribute_categories');
    }

    public function attributes()
    {
        return $this->hasManyThrough(Attribute::class, AttributeCategory::class, 'category_id', 'group_id', 'id', 'attribute_id');
    }

    public function selectProducts()
    {
        return $this->belongsToMany(Product::class, 'product_categories')
            ->where('products.is_active', 1)->with('image')->select('products.id', 'products.reward_points', 'products.on_sale', 'products.is_hot');
    }

    public function coupons()
    {
        return $this->belongsToMany(Coupon::class);
    }
    // for first level child this will works enough

    // and here is the trick for nestable child.
    public static function nestable($categories)
    {
        foreach ($categories as $category) {
            if (!$category->children->isEmpty()) {
                $category->children = self::nestable($category->children);
            }
        }

        return $categories;
    }

    public function promotions()
    {
        return $this->belongsToMany(Promotion::class, 'promotion_category');
    }

    public function getProductIdsAttribute()
    {
        return $this->products->pluck('id')->toArray();
    }

    public function scopeSelector($q)
    {
        return $q->where([["is_active", 1]])->with(["products"])->whereHas("products")
            ->withCount("products")->orderBy("products_count", 'DESC');
    }

    protected static function newFactory()
    {
        return CategoryFactory::new();
    }
}
